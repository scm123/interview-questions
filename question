TreeSet

Association aggreagation composition

interface of predicate

JVM

Garbase collection

how to monitor jvm ,findout deadlock and memory leak

given array, filter using stream collect data to map

thread

hashmap weakhashmap
override hascode and equals

Autowire 

circular dependency

Proxy pattern in spring

Bean A should be create befor Bean B

Observer design pattern
=========================================


Comparable v/s	Comparator
1) Comparable provides a single sorting sequence. In other words, we can sort the collection on the basis of a single element such as id, name, and price.	The Comparator provides multiple sorting sequences. In other words, we can sort the collection on the basis of multiple elements such as id, name, and price etc.
2) Comparable affects the original class, i.e., the actual class is modified.	Comparator doesn't affect the original class, i.e., the actual class is not modified.
3) Comparable provides compareTo() method to sort elements.	Comparator provides compare() method to sort elements.
4) Comparable is present in java.lang package.	A Comparator is present in the java.util package.
5) We can sort the list elements of Comparable type by Collections.sort(List) method.	We can sort the list elements of Comparator type by Collections.sort(List, Comparator) method.



HashMap	v/s Hashtable
1) HashMap is non synchronized. It is not-thread safe and can't be shared between many threads without proper synchronization code.	Hashtable is synchronized. It is thread-safe and can be shared with many threads.
2) HashMap allows one null key and multiple null values.	Hashtable doesn't allow any null key or value.
3) HashMap is a new class introduced in JDK 1.2.	Hashtable is a legacy class.
4) HashMap is fast.	Hashtable is slow.
5) We can make the HashMap as synchronized by calling this code
Map m = Collections.synchronizedMap(hashMap);	Hashtable is internally synchronized and can't be unsynchronized.
6) HashMap is traversed by Iterator.	Hashtable is traversed by Enumerator and Iterator.
7) Iterator in HashMap is fail-fast.	Enumerator in Hashtable is not fail-fast.
8) HashMap inherits AbstractMap class.	Hashtable inherits Dictionary class.

==============================================================================

The elements in TreeSet must be of a Comparable type. String and Wrapper classes are Comparable by default. To add user-defined objects in TreeSet, you need to implement the Comparable interface.

    import java.util.*;  
    class Book implements Comparable<Book>{  
    int id;  
    String name,author,publisher;  
    int quantity;  
    public Book(int id, String name, String author, String publisher, int quantity) {  
        this.id = id;  
        this.name = name;  
        this.author = author;  
        this.publisher = publisher;  
        this.quantity = quantity;  
    }  
    public int compareTo(Book b) {  
        if(id>b.id){  
            return 1;  
        }else if(id<b.id){  
            return -1;  
        }else{  
        return 0;  
        }  
    }  
    }  
    public class TreeSetExample {  
    public static void main(String[] args) {  
        Set<Book> set=new TreeSet<Book>();  
        //Creating Books  
        Book b1=new Book(121,"Let us C","Yashwant Kanetkar","BPB",8);  
        Book b2=new Book(233,"Operating System","Galvin","Wiley",6);  
        Book b3=new Book(101,"Data Communications & Networking","Forouzan","Mc Graw Hill",4);  
        //Adding Books to TreeSet  
        set.add(b1);  
        set.add(b2);  
        set.add(b3);  
        //Traversing TreeSet  
        for(Book b:set){  
        System.out.println(b.id+" "+b.name+" "+b.author+" "+b.publisher+" "+b.quantity);  
        }  
    }  
    }  
    
    ==============================================================================

    
    
import java.util.List;
import java.util.function.Predicate;

class BiggerThanFive<E> implements Predicate<Integer> {

    @Override
    public boolean test(Integer v) {

        Integer five = 5;

        return v > five;
    }
}

public class JavaPredicateEx {

    public static void main(String[] args) {

        List<Integer> nums = List.of(2, 3, 1, 5, 6, 7, 8, 9, 12);

        BiggerThanFive<Integer> btf = new BiggerThanFive<>();
        nums.stream().filter(btf).forEach(System.out::println);
    }
}

==================================================================================================================


The map() function is a method in the Stream class that represents a functional programming concept. In simple words, 
the map() is used to transform one object into another by applying a function.

All you need is a mapping function to convert one object to the other. Then, the map() function will do the transformation for you.
It is also an intermediate Stream operation which means you can call other Stream methods, 
like a filter, or collect on this to create a chain of transformations.

Now, coming to the filter method, as its name suggests, it filters elements based upon a condition you gave it. For example, if 
your list contains numbers and you only want numbers, then you can use the filter method to only select a number that is fully divisible by two.

The filter method essentially selects elements based upon a condition you provide. Thatâ€™s the reason that the filter (Predicate condition)
accepts a Predicate object, which provides a function that is applied to a condition.
If the condition evaluates true, then the object is selected. Otherwise, it will be ignored.

The filter() the method is also lazy which means that it will not be evaluated until you call a reduction method,
like collect, and it will stop as soon as it reaches the target.



		List<String> numbers = Arrays.asList("1", "2", "3", "4", "5", "6");
    System.out.println("original list: " + numbers);
    List<Integer> morethan9 = numbers.stream()
                                .map(s -> Integer.valueOf(s)*Integer.valueOf(s))
                                .filter(number->number>9)
                                .collect(Collectors.toList());
  
    System.out.println("processed list,  " + morethan9);
    
 ==================================================================================================================
    
    


Composition

final class Car {

  private final Engine engine;

  Car(EngineSpecs specs) {
    engine = new Engine(specs);
  }

  void move() {
    engine.work();
  }
}

Aggregation

final class Car {

  private Engine engine;

  void setEngine(Engine engine) {
    this.engine = engine;
  }

  void move() {
    if (engine != null)
      engine.work();
  }
}

In the case of composition, the Engine is completely encapsulated by the Car. There is no way for the outside world to get a reference to the Engine. 
The Engine lives and dies with the car. With aggregation, the Car also performs its functions through an Engine, but the Engine is not always an internal 
part of the Car. Engines may be swapped, or even completely removed. Not only that, but the outside world can still have a reference to the Engine, and 
tinker with it regardless of whether it's in the Car.

==================================================================================================================



BEGIN TRANSACTION;

/* Create a table called NAMES */
CREATE TABLE NAMES(firstname varchar2(20), lastname varchar2(20));

/* Create few records in this table */
INSERT INTO NAMES VALUES('Tom', 'Tom');
INSERT INTO NAMES VALUES('Tom', 'Tom');
INSERT INTO NAMES VALUES('Tom', 'Tom');
INSERT INTO NAMES VALUES('Jim', 'Beam');
INSERT INTO NAMES VALUES('Tom', 'Tom');
COMMIT;

/* Display all the records from the table */
--SELECT * FROM NAMES;

--SELECT rowid,firstname,lastname FROM NAMES;

/**
 delete from NAMES where 
 firstname||' '||lastname 
 in (
 select firstname||' '||lastname from NAMES t
  group by firstname ,lastname
  having count(firstname||' '||lastname)>1
  )
  and rowid<>1
  ;
  **/
  
  DELETE FROM NAMES WHERE ROWID NOT IN (SELECT MAX(ROWID) FROM 
NAMES GROUP BY FIRSTNAME,LASTNAME);

 --select firstname ,lastname  from NAMES t
 -- group by firstname ,lastname
 -- having count(firstname||' '||lastname)>1;
  
  SELECT * FROM NAMES;
  
  
  


    
